@page "/sellers"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@inject Blazor.Local.Services.ISellerService SellerService
@using Blazor.Shared.Others
@using Blazor.Shared.Commons
@using Blazor.Local.Shared.Components.Sellers

<style>
</style>
<div class="row">
    <div class="col-12 mt-2">
        <nav class="navbar navbar-light bg-light">
            <div class="container-fluid">
                <form class="d-flex">
                    <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search" @bind="Condition" @bind:event="oninput" @onkeyup="KeyboardEventHandler">
                    <button class="btn btn-outline-success" type="button" @onclick="@Search">Search</button>
                </form>
            </div>
        </nav>
    </div>
    <div class="col-12 body-selles row">
        <div class="col-lg-6 col-12">
            <ProductBuyed @bind-Datas="@sellerDetails" />
            <div class="col-12">
                <div class="card w-100 mt-3">
                    <div class="card-body">
                        <h5 class="card-title">Thanh toán</h5>
                        <form>
                            <div class="form-group row">
                                <label class="col-sm-2 col-form-label">Tổng</label>
                                <div class="col-sm-10">
                                    <input type="text" readonly class="form-control-plaintext" value="@StringUtil.ToCurrency((sellerDetails != null && sellerDetails.Count > 0) ? sellerDetails.Sum(x=>x.Amount) : 0)">
                                </div>
                            </div>
                            <div class="form-group row">
                                <label class="col-sm-2 col-form-label">Khách đưa</label>
                                <div class="col-sm-10">
                                    <input type="text" class="form-control" @bind="@payment">
                                </div>
                            </div>
                            <div class="form-group row">
                                <label class="col-sm-2 col-form-label">Tiền thừa</label>
                                <div class="col-sm-10">
                                    <input readonly type="text" class="form-control" value="@PaybackCurrency()">
                                </div>
                            </div>
                            <a href="#" class="btn btn-primary">Go somewhere</a>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-6 col-12 d-flex align-content-start flex-wrap">
            <ProductCard @bind-Datas="@productsSearch" OnClick="AddBuyedHandler" />
            @if (loading)
            {
                <tr>
                    <td colspan="4" class="text-center">
                        <span class="spinner-border spinner-border-lg align-center"></span>
                    </td>
                </tr>
            }
        </div>
    </div>
</div>

@code {
    private bool loading;
    private IList<Product> productsSearch;
    private IList<SellerDetail> sellerDetails { set; get; }
    private string Condition;
    private int payback, _payment;
    public int payment
    {
        get => _payment;
        set
        {
            _payment = value;
            payback = value - sellerDetails.Sum(x => x.Amount);
        }
    }
    private string PaybackCurrency() { return StringUtil.ToCurrency(payback); }

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        productsSearch = await SellerService.GetDefaultProducts();
        loading = false;

        sellerDetails = new List<SellerDetail>();
        payment = 0;
        payback = 0;
    }

    private async Task Search()
    {
        var results = await SellerService.SearchProducts(Condition);
        if (results == null) return;
        if (results.Count == 1 && StringUtil.IsNumberic(Condition))
        {
            var detail = new SellerDetail(results[0]);
            if (sellerDetails.Any(x => x.Barcode.Equals(detail.Barcode)))
                sellerDetails.Where(x => x.Barcode.Equals(detail.Barcode)).First().Quantity += 1;
            else
                sellerDetails.Add(new SellerDetail(results[0]));
        }
        else
        {
            productsSearch = results;
        }
    }

    private void KeyboardEventHandler(KeyboardEventArgs args)
    {
        if (Condition.Length == 13 && StringUtil.IsNumberic(Condition)) Search();
    }

    private async Task AddBuyedHandler(string barcode)
    {
        var results = await SellerService.SearchProducts(barcode);
        var detail = new SellerDetail(results[0]);
        if (sellerDetails.Any(x => x.Barcode.Equals(detail.Barcode)))
            sellerDetails.Where(x => x.Barcode.Equals(detail.Barcode)).First().Quantity += 1;
        else
            sellerDetails.Add(new SellerDetail(results[0]));
    }
}
